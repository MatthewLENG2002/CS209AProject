{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"content-box\"\n};\nconst _hoisted_2 = {\n  ref: \"keyWords\",\n  style: {\n    \"height\": \"200px\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"mappings":";;EACOA,KAAK,EAAC;AAAa;;EACjBC,GAAG,EAAC,UAAU;EAACC,KAAqB,EAArB;IAAA;EAAA;;;uBADtBC,oBAEM,OAFNC,UAEM,GADJC,oBAAgD,OAAhDC,UAAgD","names":["class","ref","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sourceRoot":"","sources":["/Users/tangxinyu/WebstormProjects/cs209a_proj/src/components/NounCloud.vue"],"sourcesContent":["<template>\n  <div class=\"content-box\">\n    <div ref=\"keyWords\" style=\"height: 200px\"></div>\n  </div>\n</template>\n<script>\nimport 'echarts-wordcloud'\nimport {mapGetters} from \"vuex\";\nexport default {\n  name:\"NounCloud\",\n  computed:{\n    ...mapGetters([\"getIssueNounKeyword\", \"getNounNum\"]),\n    option(){\n      return{\n        words: [\n          {\n            name: this.getIssueNounKeyword[0],\n            value: this.getNounNum[0]\n          },\n          {\n            name: this.getIssueNounKeyword[1],\n            value: this.getNounNum[1]\n          },\n          {\n            name: this.getIssueNounKeyword[2],\n            value: this.getNounNum[2]\n          },\n          {\n            name: this.getIssueNounKeyword[3],\n            value: this.getNounNum[3]\n          },\n          {\n            name: this.getIssueNounKeyword[4],\n            value: this.getNounNum[4]\n          },\n          {\n            name: this.getIssueNounKeyword[5],\n            value: this.getNounNum[5]\n          },\n          {\n            name: this.getIssueNounKeyword[6],\n            value: this.getNounNum[6]\n          },\n          {\n            name: this.getIssueNounKeyword[7],\n            value: this.getNounNum[7]\n          },\n\n          {\n            name: this.getIssueNounKeyword[8],\n            value: this.getNounNum[8]\n          },\n          {\n            name: this.getIssueNounKeyword[9],\n            value: this.getNounNum[9]\n          },\n          {\n            name: this.getIssueNounKeyword[10],\n            value: this.getNounNum[10]\n          },\n          {\n            name: this.getIssueNounKeyword[11],\n            value: this.getNounNum[11]\n          },\n          {\n            name: this.getIssueNounKeyword[12],\n            value: this.getNounNum[12]\n          },\n          {\n            name: this.getIssueNounKeyword[13],\n            value: this.getNounNum[13]\n          },\n          {\n            name: this.getIssueNounKeyword[14],\n            value: this.getNounNum[14]\n          },\n          {\n            name: this.getIssueNounKeyword[15],\n            value: this.getNounNum[15]\n          },\n          {\n            name: this.getIssueNounKeyword[16],\n            value: this.getNounNum[16]\n          },\n          {\n            name: this.getIssueNounKeyword[17],\n            value: this.getNounNum[17]\n          },\n          {\n            name: this.getIssueNounKeyword[18],\n            value: this.getNounNum[18]\n          },\n          {\n            name: this.getIssueNounKeyword[19],\n            value: this.getNounNum[19]\n          }\n        ]\n      }\n    }\n  },\n  // data() {\n  //   return {\n  //\n  //   }\n  // },\n  mounted() {\n    this.$nextTick(() => {\n      this.initEchart()\n    })\n  },\n  methods: {\n    initEchart() {\n      //获取DOM节点并初始化\n      const el = this.$refs.keyWords\n      const echarts = require('echarts')\n      const myChart = echarts.init(el)\n      //按照colorList指定颜色的数据进行随机\n      const colorList = ['#475caf', 'rgba(73,146,159,0.87)', '#ecc25d']\n      let option = {\n        tooltip: {\n          show: true\n        },\n        series: [\n          {\n            //用来调整词之间的距离\n            gridSize: 20,\n            //用来调整字的大小范围\n            sizeRange: [18, 40],\n            //用来调整词的旋转方向，，[0,0]--代表着没有角度，也就是词为水平方向\n            rotationRange: [0, 0],\n            type: 'wordCloud',\n            size: ['95%', '95%'],\n            textRotation: [0, 90],\n            textPadding: 0,\n            autoSize: {\n              enable: true,\n              minSize: 14\n            },\n            textStyle: {\n              normal: {\n                color: function() {\n                  let index = Math.floor(Math.random() * colorList.length)\n                  return colorList[index]\n                }\n              }\n            },\n            data: this.option.words\n          }\n        ]\n      }\n      //设置图表的参数\n      myChart.setOption(option)\n    }\n  }\n}\n</script>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}