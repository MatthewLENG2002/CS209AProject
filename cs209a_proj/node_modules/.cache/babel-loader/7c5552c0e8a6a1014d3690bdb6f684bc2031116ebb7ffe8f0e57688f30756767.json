{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\nvar Region = require(\"./Region\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n * @module echarts/coord/geo/parseGeoJson\n */\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n  var encodeScale = json.UTF8Scale;\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n  var features = json.features;\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n    var coordinates = geometry.coordinates;\n    var encodeOffsets = geometry.encodeOffsets;\n    for (var c = 0; c < coordinates.length; c++) {\n      var coordinate = coordinates[c];\n      if (geometry.type === 'Polygon') {\n        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);\n      } else if (geometry.type === 'MultiPolygon') {\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          var polygon = coordinate[c2];\n          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n  json.UTF8Encoding = false;\n  return json;\n}\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n  return result;\n}\n/**\n * @alias module:echarts/coord/geo/parseGeoJson\n * @param {Object} geoJson\n * @return {module:zrender/container/Group}\n */\n\nfunction _default(geoJson) {\n  decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var coordinates = geo.coordinates;\n    var geometries = [];\n    if (geo.type === 'Polygon') {\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n    if (geo.type === 'MultiPolygon') {\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n    var region = new Region(properties.name, geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}\nmodule.exports = _default;","map":{"version":3,"names":["zrUtil","require","Region","decode","json","UTF8Encoding","encodeScale","UTF8Scale","features","f","length","feature","geometry","coordinates","encodeOffsets","c","coordinate","type","decodePolygon","c2","polygon","result","prevX","prevY","i","x","charCodeAt","y","push","_default","geoJson","map","filter","featureObj","properties","geo","geometries","exterior","interiors","slice","each","item","region","name","cp","module","exports"],"sources":["/Users/tangxinyu/WebstormProjects/cs209a_proj/node_modules/echarts/lib/coord/geo/parseGeoJson.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\nvar Region = require(\"./Region\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n * @module echarts/coord/geo/parseGeoJson\n */\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var encodeScale = json.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = json.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n    var coordinates = geometry.coordinates;\n    var encodeOffsets = geometry.encodeOffsets;\n\n    for (var c = 0; c < coordinates.length; c++) {\n      var coordinate = coordinates[c];\n\n      if (geometry.type === 'Polygon') {\n        coordinates[c] = decodePolygon(coordinate, encodeOffsets[c], encodeScale);\n      } else if (geometry.type === 'MultiPolygon') {\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          var polygon = coordinate[c2];\n          coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  json.UTF8Encoding = false;\n  return json;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n/**\n * @alias module:echarts/coord/geo/parseGeoJson\n * @param {Object} geoJson\n * @return {module:zrender/container/Group}\n */\n\n\nfunction _default(geoJson) {\n  decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var coordinates = geo.coordinates;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new Region(properties.name, geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}