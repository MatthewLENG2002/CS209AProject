{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar VisualMapping = require(\"../../visual/VisualMapping\");\nvar zrColor = require(\"zrender/lib/tool/color\");\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar isArray = zrUtil.isArray;\nvar ITEM_STYLE_NORMAL = 'itemStyle';\nvar _default = {\n  seriesType: 'treemap',\n  reset: function (seriesModel, ecModel, api, payload) {\n    var tree = seriesModel.getData().tree;\n    var root = tree.root;\n    var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);\n    if (root.isRemoved()) {\n      return;\n    }\n    var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {\n      return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;\n    });\n    travelTree(root,\n    // Visual should calculate from tree root but not view root.\n    {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);\n  }\n};\nfunction travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {\n  var nodeModel = node.getModel();\n  var nodeLayout = node.getLayout(); // Optimize\n\n  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\n    return;\n  }\n  var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);\n  var levelItemStyle = levelItemStyles[node.depth];\n  var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel); // calculate border color\n\n  var borderColor = nodeItemStyleModel.get('borderColor');\n  var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\n  var thisNodeColor;\n  if (borderColorSaturation != null) {\n    // For performance, do not always execute 'calculateColor'.\n    thisNodeColor = calculateColor(visuals, node);\n    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\n  }\n  node.setVisual('borderColor', borderColor);\n  var viewChildren = node.viewChildren;\n  if (!viewChildren || !viewChildren.length) {\n    thisNodeColor = calculateColor(visuals, node); // Apply visual to this node.\n\n    node.setVisual('color', thisNodeColor);\n  } else {\n    var mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren); // Designate visual to children.\n\n    zrUtil.each(viewChildren, function (child, index) {\n      // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\n      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {\n        var childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);\n        travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);\n      }\n    });\n  }\n}\nfunction buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {\n  var visuals = zrUtil.extend({}, designatedVisual);\n  zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\n    // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\n    var val = nodeItemStyleModel.get(visualName, true); // Ignore parent\n\n    val == null && levelItemStyle && (val = levelItemStyle[visualName]);\n    val == null && (val = designatedVisual[visualName]);\n    val == null && (val = seriesItemStyleModel.get(visualName));\n    val != null && (visuals[visualName] = val);\n  });\n  return visuals;\n}\nfunction calculateColor(visuals) {\n  var color = getValueVisualDefine(visuals, 'color');\n  if (color) {\n    var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\n    var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\n    if (colorSaturation) {\n      color = zrColor.modifyHSL(color, null, null, colorSaturation);\n    }\n    if (colorAlpha) {\n      color = zrColor.modifyAlpha(color, colorAlpha);\n    }\n    return color;\n  }\n}\nfunction calculateBorderColor(borderColorSaturation, thisNodeColor) {\n  return thisNodeColor != null ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;\n}\nfunction getValueVisualDefine(visuals, name) {\n  var value = visuals[name];\n  if (value != null && value !== 'none') {\n    return value;\n  }\n}\nfunction buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {\n  if (!viewChildren || !viewChildren.length) {\n    return;\n  }\n  var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));\n  if (!rangeVisual) {\n    return;\n  }\n  var visualMin = nodeModel.get('visualMin');\n  var visualMax = nodeModel.get('visualMax');\n  var dataExtent = nodeLayout.dataExtent.slice();\n  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);\n  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);\n  var colorMappingBy = nodeModel.get('colorMappingBy');\n  var opt = {\n    type: rangeVisual.name,\n    dataExtent: dataExtent,\n    visual: rangeVisual.range\n  };\n  if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {\n    opt.mappingMethod = 'category';\n    opt.loop = true; // categories is ordinal, so do not set opt.categories.\n  } else {\n    opt.mappingMethod = 'linear';\n  }\n  var mapping = new VisualMapping(opt);\n  mapping.__drColorMappingBy = colorMappingBy;\n  return mapping;\n} // Notice: If we dont have the attribute 'colorRange', but only use\n// attribute 'color' to represent both concepts of 'colorRange' and 'color',\n// (It means 'colorRange' when 'color' is Array, means 'color' when not array),\n// this problem will be encountered:\n// If a level-1 node dont have children, and its siblings has children,\n// and colorRange is set on level-1, then the node can not be colored.\n// So we separate 'colorRange' and 'color' to different attributes.\n\nfunction getRangeVisual(nodeModel, name) {\n  // 'colorRange', 'colorARange', 'colorSRange'.\n  // If not exsits on this node, fetch from levels and series.\n  var range = nodeModel.get(name);\n  return isArray(range) && range.length ? {\n    name: name,\n    range: range\n  } : null;\n}\nfunction mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\n  var childVisuals = zrUtil.extend({}, visuals);\n  if (mapping) {\n    var mappingType = mapping.type;\n    var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;\n    var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));\n    childVisuals[mappingType] = mapping.mapValueToVisual(value);\n  }\n  return childVisuals;\n}\nmodule.exports = _default;","map":{"version":3,"names":["VisualMapping","require","zrColor","zrUtil","isArray","ITEM_STYLE_NORMAL","_default","seriesType","reset","seriesModel","ecModel","api","payload","tree","getData","root","seriesItemStyleModel","getModel","isRemoved","levelItemStyles","map","levelModels","levelModel","get","travelTree","getViewRoot","getAncestors","node","designatedVisual","viewRootAncestors","nodeModel","nodeLayout","getLayout","invisible","isInView","nodeItemStyleModel","levelItemStyle","depth","visuals","buildVisuals","borderColor","borderColorSaturation","thisNodeColor","calculateColor","calculateBorderColor","setVisual","viewChildren","length","mapping","buildVisualMapping","each","child","index","childVisual","mapVisual","extend","visualName","val","color","getValueVisualDefine","colorAlpha","colorSaturation","modifyHSL","modifyAlpha","name","value","rangeVisual","getRangeVisual","visualMin","visualMax","dataExtent","slice","colorMappingBy","opt","type","visual","range","mappingMethod","loop","__drColorMappingBy","childVisuals","mappingType","mapIdToIndex","getId","getValue","mapValueToVisual","module","exports"],"sources":["/Users/tangxinyu/WebstormProjects/cs209a_proj/node_modules/echarts/lib/chart/treemap/treemapVisual.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar VisualMapping = require(\"../../visual/VisualMapping\");\n\nvar zrColor = require(\"zrender/lib/tool/color\");\n\nvar zrUtil = require(\"zrender/lib/core/util\");\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nvar isArray = zrUtil.isArray;\nvar ITEM_STYLE_NORMAL = 'itemStyle';\nvar _default = {\n  seriesType: 'treemap',\n  reset: function (seriesModel, ecModel, api, payload) {\n    var tree = seriesModel.getData().tree;\n    var root = tree.root;\n    var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);\n\n    if (root.isRemoved()) {\n      return;\n    }\n\n    var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {\n      return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;\n    });\n    travelTree(root, // Visual should calculate from tree root but not view root.\n    {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);\n  }\n};\n\nfunction travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {\n  var nodeModel = node.getModel();\n  var nodeLayout = node.getLayout(); // Optimize\n\n  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\n    return;\n  }\n\n  var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);\n  var levelItemStyle = levelItemStyles[node.depth];\n  var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel); // calculate border color\n\n  var borderColor = nodeItemStyleModel.get('borderColor');\n  var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\n  var thisNodeColor;\n\n  if (borderColorSaturation != null) {\n    // For performance, do not always execute 'calculateColor'.\n    thisNodeColor = calculateColor(visuals, node);\n    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\n  }\n\n  node.setVisual('borderColor', borderColor);\n  var viewChildren = node.viewChildren;\n\n  if (!viewChildren || !viewChildren.length) {\n    thisNodeColor = calculateColor(visuals, node); // Apply visual to this node.\n\n    node.setVisual('color', thisNodeColor);\n  } else {\n    var mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren); // Designate visual to children.\n\n    zrUtil.each(viewChildren, function (child, index) {\n      // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\n      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {\n        var childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);\n        travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);\n      }\n    });\n  }\n}\n\nfunction buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {\n  var visuals = zrUtil.extend({}, designatedVisual);\n  zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\n    // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\n    var val = nodeItemStyleModel.get(visualName, true); // Ignore parent\n\n    val == null && levelItemStyle && (val = levelItemStyle[visualName]);\n    val == null && (val = designatedVisual[visualName]);\n    val == null && (val = seriesItemStyleModel.get(visualName));\n    val != null && (visuals[visualName] = val);\n  });\n  return visuals;\n}\n\nfunction calculateColor(visuals) {\n  var color = getValueVisualDefine(visuals, 'color');\n\n  if (color) {\n    var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\n    var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\n\n    if (colorSaturation) {\n      color = zrColor.modifyHSL(color, null, null, colorSaturation);\n    }\n\n    if (colorAlpha) {\n      color = zrColor.modifyAlpha(color, colorAlpha);\n    }\n\n    return color;\n  }\n}\n\nfunction calculateBorderColor(borderColorSaturation, thisNodeColor) {\n  return thisNodeColor != null ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;\n}\n\nfunction getValueVisualDefine(visuals, name) {\n  var value = visuals[name];\n\n  if (value != null && value !== 'none') {\n    return value;\n  }\n}\n\nfunction buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {\n  if (!viewChildren || !viewChildren.length) {\n    return;\n  }\n\n  var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));\n\n  if (!rangeVisual) {\n    return;\n  }\n\n  var visualMin = nodeModel.get('visualMin');\n  var visualMax = nodeModel.get('visualMax');\n  var dataExtent = nodeLayout.dataExtent.slice();\n  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);\n  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);\n  var colorMappingBy = nodeModel.get('colorMappingBy');\n  var opt = {\n    type: rangeVisual.name,\n    dataExtent: dataExtent,\n    visual: rangeVisual.range\n  };\n\n  if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {\n    opt.mappingMethod = 'category';\n    opt.loop = true; // categories is ordinal, so do not set opt.categories.\n  } else {\n    opt.mappingMethod = 'linear';\n  }\n\n  var mapping = new VisualMapping(opt);\n  mapping.__drColorMappingBy = colorMappingBy;\n  return mapping;\n} // Notice: If we dont have the attribute 'colorRange', but only use\n// attribute 'color' to represent both concepts of 'colorRange' and 'color',\n// (It means 'colorRange' when 'color' is Array, means 'color' when not array),\n// this problem will be encountered:\n// If a level-1 node dont have children, and its siblings has children,\n// and colorRange is set on level-1, then the node can not be colored.\n// So we separate 'colorRange' and 'color' to different attributes.\n\n\nfunction getRangeVisual(nodeModel, name) {\n  // 'colorRange', 'colorARange', 'colorSRange'.\n  // If not exsits on this node, fetch from levels and series.\n  var range = nodeModel.get(name);\n  return isArray(range) && range.length ? {\n    name: name,\n    range: range\n  } : null;\n}\n\nfunction mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\n  var childVisuals = zrUtil.extend({}, visuals);\n\n  if (mapping) {\n    var mappingType = mapping.type;\n    var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;\n    var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));\n    childVisuals[mappingType] = mapping.mapValueToVisual(value);\n  }\n\n  return childVisuals;\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}