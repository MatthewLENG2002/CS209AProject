{"ast":null,"code":"var _event = require(\"../core/event\");\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\nvar zrUtil = require(\"../core/util\");\nvar Eventful = require(\"../mixin/Eventful\");\nvar env = require(\"../core/env\");\nvar TOUCH_CLICK_DELAY = 300;\nvar mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\nvar touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\nvar pointerEventNames = {\n  pointerdown: 1,\n  pointerup: 1,\n  pointermove: 1,\n  pointerout: 1\n};\nvar pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n  var nm = name.replace('mouse', 'pointer');\n  return pointerEventNames[nm] ? nm : name;\n});\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n} // function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n */\n\nfunction setTouchTimer(instance) {\n  instance._touching = true;\n  clearTimeout(instance._touchTimer);\n  instance._touchTimer = setTimeout(function () {\n    instance._touching = false;\n  }, 700);\n}\nvar domHandlers = {\n  /**\n   * Mouse move handler\n   * @inner\n   * @param {Event} event\n   */\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousemove', event);\n  },\n  /**\n   * Mouse out handler\n   * @inner\n   * @param {Event} event\n   */\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var element = event.toElement || event.relatedTarget;\n    if (element !== this.dom) {\n      while (element && element.nodeType !== 9) {\n        // 忽略包含在root中的dom引起的mouseOut\n        if (element === this.dom) {\n          return;\n        }\n        element = element.parentNode;\n      }\n    }\n    this.trigger('mouseout', event);\n  },\n  /**\n   * Touch开始响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should\n    // be triggered, and must before `mousedown` triggered.\n\n    domHandlers.mousemove.call(this, event);\n    domHandlers.mousedown.call(this, event);\n    setTouchTimer(this);\n  },\n  /**\n   * Touch移动响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    domHandlers.mousemove.call(this, event);\n    setTouchTimer(this);\n  },\n  /**\n   * Touch结束响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(event, 'end');\n    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      domHandlers.click.call(this, event);\n    }\n    setTouchTimer(this);\n  },\n  pointerdown: function (event) {\n    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    domHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check domHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mouseout.call(this, event);\n    }\n  }\n};\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// Common handlers\n\nzrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  domHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * 为控制类实例初始化dom 事件处理函数\n *\n * @inner\n * @param {module:zrender/Handler} instance 控制类实例\n */\n\nfunction initDomHandler(instance) {\n  zrUtil.each(touchHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(pointerHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(mouseHandlerNames, function (name) {\n    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n  });\n  function makeMouseHandler(fn, instance) {\n    return function () {\n      if (instance._touching) {\n        return;\n      }\n      return fn.apply(instance, arguments);\n    };\n  }\n}\nfunction HandlerDomProxy(dom) {\n  Eventful.call(this);\n  this.dom = dom;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._touching = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this._touchTimer;\n  this._handlers = {};\n  initDomHandler(this);\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    mountHandlers(pointerHandlerNames, this); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n    mountHandlers(mouseHandlerNames, this);\n  }\n  function mountHandlers(handlerNames, instance) {\n    zrUtil.each(handlerNames, function (name) {\n      addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n    }, instance);\n  }\n}\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\nhandlerDomProxyProto.dispose = function () {\n  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n  for (var i = 0; i < handlerNames.length; i++) {\n    var name = handlerNames[i];\n    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n  }\n};\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;","map":{"version":3,"names":["_event","require","addEventListener","removeEventListener","normalizeEvent","zrUtil","Eventful","env","TOUCH_CLICK_DELAY","mouseHandlerNames","touchHandlerNames","pointerEventNames","pointerdown","pointerup","pointermove","pointerout","pointerHandlerNames","map","name","nm","replace","eventNameFix","browser","firefox","setTouchTimer","instance","_touching","clearTimeout","_touchTimer","setTimeout","domHandlers","mousemove","event","dom","trigger","mouseout","element","toElement","relatedTarget","nodeType","parentNode","touchstart","zrByTouch","_lastTouchMoment","Date","handler","processGesture","call","mousedown","touchmove","touchend","mouseup","click","isPointerFromTouch","pointerType","each","initDomHandler","_handlers","bind","makeMouseHandler","fn","apply","arguments","HandlerDomProxy","pointerEventsSupported","mountHandlers","touchEventsSupported","handlerNames","handlerDomProxyProto","prototype","dispose","concat","i","length","setCursor","cursorStyle","style","cursor","mixin","_default","module","exports"],"sources":["/Users/tangxinyu/WebstormProjects/cs209a_proj/node_modules/zrender/lib/dom/HandlerProxy.js"],"sourcesContent":["var _event = require(\"../core/event\");\n\nvar addEventListener = _event.addEventListener;\nvar removeEventListener = _event.removeEventListener;\nvar normalizeEvent = _event.normalizeEvent;\n\nvar zrUtil = require(\"../core/util\");\n\nvar Eventful = require(\"../mixin/Eventful\");\n\nvar env = require(\"../core/env\");\n\nvar TOUCH_CLICK_DELAY = 300;\nvar mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\nvar touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\nvar pointerEventNames = {\n  pointerdown: 1,\n  pointerup: 1,\n  pointermove: 1,\n  pointerout: 1\n};\nvar pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n  var nm = name.replace('mouse', 'pointer');\n  return pointerEventNames[nm] ? nm : name;\n});\n\nfunction eventNameFix(name) {\n  return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;\n} // function onMSGestureChange(proxy, event) {\n//     if (event.translationX || event.translationY) {\n//         // mousemove is carried by MSGesture to reduce the sensitivity.\n//         proxy.handler.dispatchToElement(event.target, 'mousemove', event);\n//     }\n//     if (event.scale !== 1) {\n//         event.pinchX = event.offsetX;\n//         event.pinchY = event.offsetY;\n//         event.pinchScale = event.scale;\n//         proxy.handler.dispatchToElement(event.target, 'pinch', event);\n//     }\n// }\n\n/**\n * Prevent mouse event from being dispatched after Touch Events action\n * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>\n * 1. Mobile browsers dispatch mouse events 300ms after touchend.\n * 2. Chrome for Android dispatch mousedown for long-touch about 650ms\n * Result: Blocking Mouse Events for 700ms.\n */\n\n\nfunction setTouchTimer(instance) {\n  instance._touching = true;\n  clearTimeout(instance._touchTimer);\n  instance._touchTimer = setTimeout(function () {\n    instance._touching = false;\n  }, 700);\n}\n\nvar domHandlers = {\n  /**\n   * Mouse move handler\n   * @inner\n   * @param {Event} event\n   */\n  mousemove: function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousemove', event);\n  },\n\n  /**\n   * Mouse out handler\n   * @inner\n   * @param {Event} event\n   */\n  mouseout: function (event) {\n    event = normalizeEvent(this.dom, event);\n    var element = event.toElement || event.relatedTarget;\n\n    if (element !== this.dom) {\n      while (element && element.nodeType !== 9) {\n        // 忽略包含在root中的dom引起的mouseOut\n        if (element === this.dom) {\n          return;\n        }\n\n        element = element.parentNode;\n      }\n    }\n\n    this.trigger('mouseout', event);\n  },\n\n  /**\n   * Touch开始响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchstart: function (event) {\n    // Default mouse behaviour should not be disabled here.\n    // For example, page may needs to be slided.\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this._lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start'); // In touch device, trigger `mousemove`(`mouseover`) should\n    // be triggered, and must before `mousedown` triggered.\n\n    domHandlers.mousemove.call(this, event);\n    domHandlers.mousedown.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch移动响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchmove: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(event, 'change'); // Mouse move should always be triggered no matter whether\n    // there is gestrue event, because mouse move and pinch may\n    // be used at the same time.\n\n    domHandlers.mousemove.call(this, event);\n    setTouchTimer(this);\n  },\n\n  /**\n   * Touch结束响应函数\n   * @inner\n   * @param {Event} event\n   */\n  touchend: function (event) {\n    event = normalizeEvent(this.dom, event); // Mark touch, which is useful in distinguish touch and\n    // mouse event in upper applicatoin.\n\n    event.zrByTouch = true;\n    this.handler.processGesture(event, 'end');\n    domHandlers.mouseup.call(this, event); // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is\n    // triggered in `touchstart`. This seems to be illogical, but by this mechanism,\n    // we can conveniently implement \"hover style\" in both PC and touch device just\n    // by listening to `mouseover` to add \"hover style\" and listening to `mouseout`\n    // to remove \"hover style\" on an element, without any additional code for\n    // compatibility. (`mouseout` will not be triggered in `touchend`, so \"hover\n    // style\" will remain for user view)\n    // click event should always be triggered no matter whether\n    // there is gestrue event. System click can not be prevented.\n\n    if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {\n      domHandlers.click.call(this, event);\n    }\n\n    setTouchTimer(this);\n  },\n  pointerdown: function (event) {\n    domHandlers.mousedown.call(this, event); // if (useMSGuesture(this, event)) {\n    //     this._msGesture.addPointer(event.pointerId);\n    // }\n  },\n  pointermove: function (event) {\n    // FIXME\n    // pointermove is so sensitive that it always triggered when\n    // tap(click) on touch screen, which affect some judgement in\n    // upper application. So, we dont support mousemove on MS touch\n    // device yet.\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function (event) {\n    domHandlers.mouseup.call(this, event);\n  },\n  pointerout: function (event) {\n    // pointerout will be triggered when tap on touch screen\n    // (IE11+/Edge on MS Surface) after click event triggered,\n    // which is inconsistent with the mousout behavior we defined\n    // in touchend. So we unify them.\n    // (check domHandlers.touchend for detailed explanation)\n    if (!isPointerFromTouch(event)) {\n      domHandlers.mouseout.call(this, event);\n    }\n  }\n};\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n} // function useMSGuesture(handlerProxy, event) {\n//     return isPointerFromTouch(event) && !!handlerProxy._msGesture;\n// }\n// Common handlers\n\n\nzrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {\n  domHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\n/**\n * 为控制类实例初始化dom 事件处理函数\n *\n * @inner\n * @param {module:zrender/Handler} instance 控制类实例\n */\n\nfunction initDomHandler(instance) {\n  zrUtil.each(touchHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(pointerHandlerNames, function (name) {\n    instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);\n  });\n  zrUtil.each(mouseHandlerNames, function (name) {\n    instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);\n  });\n\n  function makeMouseHandler(fn, instance) {\n    return function () {\n      if (instance._touching) {\n        return;\n      }\n\n      return fn.apply(instance, arguments);\n    };\n  }\n}\n\nfunction HandlerDomProxy(dom) {\n  Eventful.call(this);\n  this.dom = dom;\n  /**\n   * @private\n   * @type {boolean}\n   */\n\n  this._touching = false;\n  /**\n   * @private\n   * @type {number}\n   */\n\n  this._touchTimer;\n  this._handlers = {};\n  initDomHandler(this);\n\n  if (env.pointerEventsSupported) {\n    // Only IE11+/Edge\n    // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),\n    // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event\n    // at the same time.\n    // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on\n    // screen, which do not occurs in pointer event.\n    // So we use pointer event to both detect touch gesture and mouse behavior.\n    mountHandlers(pointerHandlerNames, this); // FIXME\n    // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,\n    // which does not prevent defuault behavior occasionally (which may cause view port\n    // zoomed in but use can not zoom it back). And event.preventDefault() does not work.\n    // So we have to not to use MSGesture and not to support touchmove and pinch on MS\n    // touch screen. And we only support click behavior on MS touch screen now.\n    // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.\n    // We dont support touch on IE on win7.\n    // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>\n    // if (typeof MSGesture === 'function') {\n    //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line\n    //     dom.addEventListener('MSGestureChange', onMSGestureChange);\n    // }\n  } else {\n    if (env.touchEventsSupported) {\n      mountHandlers(touchHandlerNames, this); // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.\n      // addEventListener(root, 'mouseout', this._mouseoutHandler);\n    } // 1. Considering some devices that both enable touch and mouse event (like on MS Surface\n    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise\n    // mouse event can not be handle in those devices.\n    // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent\n    // mouseevent after touch event triggered, see `setTouchTimer`.\n\n\n    mountHandlers(mouseHandlerNames, this);\n  }\n\n  function mountHandlers(handlerNames, instance) {\n    zrUtil.each(handlerNames, function (name) {\n      addEventListener(dom, eventNameFix(name), instance._handlers[name]);\n    }, instance);\n  }\n}\n\nvar handlerDomProxyProto = HandlerDomProxy.prototype;\n\nhandlerDomProxyProto.dispose = function () {\n  var handlerNames = mouseHandlerNames.concat(touchHandlerNames);\n\n  for (var i = 0; i < handlerNames.length; i++) {\n    var name = handlerNames[i];\n    removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);\n  }\n};\n\nhandlerDomProxyProto.setCursor = function (cursorStyle) {\n  this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n};\n\nzrUtil.mixin(HandlerDomProxy, Eventful);\nvar _default = HandlerDomProxy;\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}