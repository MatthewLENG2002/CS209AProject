{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\nvar createHashMap = _util.createHashMap;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\nfunction _default(seriesType) {\n  return {\n    getTargetSeries: function (ecModel) {\n      // Pie and funnel may use diferrent scope\n      var paletteScope = {};\n      var seiresModelMap = createHashMap();\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n        seriesModel.__paletteScope = paletteScope;\n        seiresModelMap.set(seriesModel.uid, seriesModel);\n      });\n      return seiresModelMap;\n    },\n    reset: function (seriesModel, ecModel) {\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n        var singleDataBorderColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'borderColor', true);\n        var itemModel;\n        if (!singleDataColor || !singleDataBorderColor) {\n          // FIXME Performance\n          itemModel = dataAll.getItemModel(rawIdx);\n        }\n        if (!singleDataColor) {\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n        if (!singleDataBorderColor) {\n          var borderColor = itemModel.get('itemStyle.borderColor'); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'borderColor', borderColor); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'borderColor', borderColor);\n          }\n        } else {\n          // Set data all borderColor for legend\n          dataAll.setItemVisual(rawIdx, 'borderColor', singleDataBorderColor);\n        }\n      });\n    }\n  };\n}\nmodule.exports = _default;","map":{"version":3,"names":["_util","require","createHashMap","_default","seriesType","getTargetSeries","ecModel","paletteScope","seiresModelMap","eachSeriesByType","seriesModel","__paletteScope","set","uid","reset","dataAll","getRawData","idxMap","data","getData","each","idx","rawIdx","getRawIndex","filteredIdx","singleDataColor","getItemVisual","singleDataBorderColor","itemModel","getItemModel","color","get","getColorFromPalette","getName","count","setItemVisual","borderColor","module","exports"],"sources":["/Users/tangxinyu/WebstormProjects/cs209a_proj/node_modules/echarts/lib/visual/dataColor.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\nvar _util = require(\"zrender/lib/core/util\");\n\nvar createHashMap = _util.createHashMap;\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Pick color from palette for each data item.\n// Applicable for charts that require applying color palette\n// in data level (like pie, funnel, chord).\nfunction _default(seriesType) {\n  return {\n    getTargetSeries: function (ecModel) {\n      // Pie and funnel may use diferrent scope\n      var paletteScope = {};\n      var seiresModelMap = createHashMap();\n      ecModel.eachSeriesByType(seriesType, function (seriesModel) {\n        seriesModel.__paletteScope = paletteScope;\n        seiresModelMap.set(seriesModel.uid, seriesModel);\n      });\n      return seiresModelMap;\n    },\n    reset: function (seriesModel, ecModel) {\n      var dataAll = seriesModel.getRawData();\n      var idxMap = {};\n      var data = seriesModel.getData();\n      data.each(function (idx) {\n        var rawIdx = data.getRawIndex(idx);\n        idxMap[rawIdx] = idx;\n      });\n      dataAll.each(function (rawIdx) {\n        var filteredIdx = idxMap[rawIdx]; // If series.itemStyle.normal.color is a function. itemVisual may be encoded\n\n        var singleDataColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'color', true);\n        var singleDataBorderColor = filteredIdx != null && data.getItemVisual(filteredIdx, 'borderColor', true);\n        var itemModel;\n\n        if (!singleDataColor || !singleDataBorderColor) {\n          // FIXME Performance\n          itemModel = dataAll.getItemModel(rawIdx);\n        }\n\n        if (!singleDataColor) {\n          var color = itemModel.get('itemStyle.color') || seriesModel.getColorFromPalette(dataAll.getName(rawIdx) || rawIdx + '', seriesModel.__paletteScope, dataAll.count()); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'color', color); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'color', color);\n          }\n        } else {\n          // Set data all color for legend\n          dataAll.setItemVisual(rawIdx, 'color', singleDataColor);\n        }\n\n        if (!singleDataBorderColor) {\n          var borderColor = itemModel.get('itemStyle.borderColor'); // Legend may use the visual info in data before processed\n\n          dataAll.setItemVisual(rawIdx, 'borderColor', borderColor); // Data is not filtered\n\n          if (filteredIdx != null) {\n            data.setItemVisual(filteredIdx, 'borderColor', borderColor);\n          }\n        } else {\n          // Set data all borderColor for legend\n          dataAll.setItemVisual(rawIdx, 'borderColor', singleDataBorderColor);\n        }\n      });\n    }\n  };\n}\n\nmodule.exports = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}